const urls = {
    collectionService: 'http://localhost:22400/api/v1',
    navigatorService: 'http://localhost:22401/api/v1/navigator'
};

const blocks = {
    header: 'headerDiv',
    fields: 'fieldsDiv',
    error: 'errorDiv',
    submit: 'submitDiv',
    result: 'resultDiv'
}


const baseUi = {
    pageNumber: '<div>Номер страницы: <input type="number" id="pageNumber" min="1" value="1"></div>',
    pageSize: '<div>Размер страницы: <input type="number" id="pageSize" min="1" max="100" value="5"></div>',
    // id|name|coordinates\.x|coordinates\.y|creationDate|from\.x|from\.y|from\.z|from\.name|to\.x|to\.y|to\.name|distance
    sortingField: '<div>Поле для сортировки путей: <select id="sortingField">' +
        '<option>id</option>' +
        '<option>name</option>' +
        '<option>coordinates.x</option>' +
        '<option>coordinates.y</option>' +
        '<option>creationDate</option>' +
        '<option>from.x</option>' +
        '<option>from.y</option>' +
        '<option>from.z</option>' +
        '<option>from.name</option>' +
        '<option>to.x</option>' +
        '<option>to.y</option>' +
        '<option>to.name</option>' +
        '<option>distance</option>' +
        '</select></div>',
    sortingOrder: '<div>Порядок сортировки: <input type="radio" name="sortingOrder" value="" checked>По неубыванию' +
        '<input type="radio" name="sortingOrder" value="<">По невозрастанию</div>',
    // (id|name|coordinates\.x|coordinates\.y|creationDate|from\.x|from\.y|from\.z|from\.name|to\.x|to\.y|to\.name|distance)(=|!=|>|<|>=|<=)(.+)
    filteringField: '<div>Поле для фильтрации путей: <select id="filteringField">' +
        '<option>id</option>' +
        '<option>name</option>' +
        '<option>coordinates.x</option>' +
        '<option>coordinates.y</option>' +
        '<option>creationDate</option>' +
        '<option>from.x</option>' +
        '<option>from.y</option>' +
        '<option>from.z</option>' +
        '<option>from.name</option>' +
        '<option>to.x</option>' +
        '<option>to.y</option>' +
        '<option>to.name</option>' +
        '<option>distance</option>' +
        '</select></div>',
    filteringComparator: '<div></div>',
    filteringValue: '<div></div>',
    routeId: '<div>Id: <input type="number" id="routeId" min="1" value="1"></div>',
    routeName: '<div>Id: <input type="text"></div>',
    routeCoordinatesX: '<div>Id: <input type="number"></div>',
    routeCoordinatesY: '<div>Id: <input type="number"></div>',
    routeCreationDate: '<div>Id: <input type="date" id="routeId"></div>',
    routeFromX: '<div>Id: <input type="number"></div>',
    routeFromY: '<div>Id: <input type="number"></div>',
    routeFromZ: '<div>Id: <input type="number"></div>',
    routeFromName: '<div>Id: <input type="text"></div>',
    routeToX: '<div>Id: <input type="number"></div>',
    routeToY: '<div>Id: <input type="number"></div>',
    routeToZ: '<div>Id: <input type="number"></div>',
    routeToName: '<div>Id: <input type="text"></div>',
    routeDistance: '<div>Id: <input type="number"></div>',
    submitButton: '<div><input type="button" value="Поехали" onclick="executeRequestWithMode()"></div>'
}

const ui = {
    paging: '<div>' + baseUi.pageNumber + baseUi.pageSize + '</div>',
    sorting: '<div>' + baseUi.sortingField + baseUi.sortingOrder + '</div>',
    filtering: '<div>' + baseUi.filteringField + baseUi.filteringComparator + baseUi.filteringValue + '</div>',
    routeWithoutAutogeneratedFields: '<div>' + '</div>',
    routeAllFields: '<div>' + '</div>',
    navigatorGetRoutes: '<div>' + '</div>',
    navigatorCreateRoute: '<div>' + '</div>'
}

const modes = {
    getRoutes: {
        headerText: "Получить список путей",
        fieldsText: ui.paging + ui.sorting + ui.filtering,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    createRoute: {
        headerText: "Создать путь",
        fieldsText: ui.routeWithoutAutogeneratedFields,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    getRoute: {
        headerText: "Получить путь по ID",
        fieldsText: baseUi.routeId,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    updateRoute: {
        headerText: "Изменить путь по ID",
        fieldsText: ui.routeAllFields,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    deleteRoute: {
        headerText: "Удалить путь по ID",
        fieldsText: baseUi.routeId,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    groupInfo: {
        headerText: "Получить размеры групп",
        fieldsText: "",
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    getDistanceRoute: {
        headerText: "Получить пути заданной длины",
        fieldsText: baseUi.routeDistance,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    getNavigator: {
        headerText: "Получить все пути между заданными локациями",
        fieldsText: ui.navigatorGetRoutes,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    },
    createNavigator: {
        headerText: "Создать путь между заданными локациями",
        fieldsText: ui.navigatorCreateRoute,
        errorText: "",
        submitText: baseUi.submitButton,
        resultText: ""
    }
};

let currentMode = modes.getRoutes;

function setBlockInnerHtml(blockId, innerHtml) {
    document.getElementById(blockId).innerHTML = innerHtml
}

function applyMode(mode) {
    currentMode = mode;
    setBlockInnerHtml(blocks.header, mode.headerText)
    setBlockInnerHtml(blocks.fields, mode.fieldsText)
    setBlockInnerHtml(blocks.error, mode.errorText)
    setBlockInnerHtml(blocks.submit, mode.submitText)
    setBlockInnerHtml(blocks.result, mode.resultText)
}

applyMode(modes.getRoutes)

/*function sendXML() {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', 'https://example.com/data.xml', true);

    xhr.onload = function () {
        if (xhr.status === 200) {
            const xmlDoc = xhr.responseXML; // Получаем XML-документ
            const items = xmlDoc.getElementsByTagName('item');
            for (let i = 0; i < items.length; i++) {
                console.log(items[i].getElementsByTagName('title')[0].textContent);
            }
        }
    };

    xhr.send();
}*/

/*function parseXML() {
    const xmlString = "<root></root>";
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlString, "application/xml");
    alert(xmlDoc.getElementsByName("root").length)
}*/


function validateFields() {
    return true;
}

function executeRequestWithMode() {
    if (validateFields()) {
        fetch("https://ya.ru", {
            mode: 'no-cors',
            method: "get",
        }).then(function (response) {
            alert(response.status)
        })
    }
}